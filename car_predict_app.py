# -*- coding: utf-8 -*-
"""car_predict_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19ZM50UdINZiUWla7WGVqlzAsIsdVzTtQ
"""

import streamlit as st
import pandas as pd
import pickle
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Load the trained model
@st.cache(allow_output_mutation=True)
def load_model():
    # Load the model directly without using __file__
    with open('best_rf_model.pkl', 'rb') as model_file:
        model = pickle.load(model_file)
    return model

# Preprocess input data
def preprocess_data(data):
    # Create new features
    current_year = 2023
    data['car_age'] = current_year - data['year']
    data['mileage_per_year'] = data['mileage'] / data['car_age']
    data['high_mileage'] = (data['mileage'] > 100000).astype(int)

    # Encode categorical variables
    le = LabelEncoder()
    categorical_columns = ['mark', 'model', 'transmission', 'drive', 'hand_drive', 'fuel']
    for col in categorical_columns:
        data[col] = le.fit_transform(data[col])

    # Scale numerical features
    scaler = StandardScaler()
    numerical_columns = ['year', 'mileage', 'engine_capacity', 'car_age', 'mileage_per_year']
    data[numerical_columns] = scaler.fit_transform(data[numerical_columns])

    return data

# Streamlit application layout
st.title("Car Price Prediction App")

# Sidebar for user input
st.sidebar.header("User Input")

# User inputs
mark = st.sidebar.selectbox("Car Make", ["Toyota", "BMW", "Honda"])
model = st.sidebar.selectbox("Car Model", ["Corolla", "X5", "Civic"])
year = st.sidebar.number_input("Year", min_value=2000, max_value=2023, value=2015)
mileage = st.sidebar.number_input("Mileage", min_value=0, value=60000)
engine_capacity = st.sidebar.number_input("Engine Capacity (L)", min_value=0.0, value=1.8)
transmission = st.sidebar.selectbox("Transmission", ["Automatic", "Manual"])
drive = st.sidebar.selectbox("Drive", ["FWD", "AWD"])
hand_drive = st.sidebar.selectbox("Hand Drive", ["Left", "Right"])
fuel = st.sidebar.selectbox("Fuel Type", ["Petrol", "Diesel"])

# Create a DataFrame from user input
input_data = pd.DataFrame({
    'mark': [mark],
    'model': [model],
    'year': [year],
    'mileage': [mileage],
    'engine_capacity': [engine_capacity],
    'transmission': [transmission],
    'drive': [drive],
    'hand_drive': [hand_drive],
    'fuel': [fuel]
})

# Preprocess the input data
processed_data = preprocess_data(input_data)

# Load the model
model = load_model()

# Make predictions
if st.sidebar.button("Predict Price"):
    predicted_price = model.predict(processed_data)
    st.write(f"Predicted Car Price: ${predicted_price[0]:,.2f}")

# Optional: Display the input data
st.write("### Input Data")
st.write(processed_data)